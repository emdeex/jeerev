Jm doc "Tests for the Ju utility module."

test z01/num {number to JSON} {
  Ju toJson 123
} 123

test z01/numstr {number to JSON, force string} {
  Ju toJson 123 -str
} {"123"}

test z01/str {string to JSON} {
  Ju toJson abc
} {"abc"}

test z01/str {empty string to JSON} {
  Ju toJson {}
} {""}

test z01/escape {string with escapes to JSON} {
  Ju toJson "< \\ \b \f \n \r \t \" \\t >"
} {"< \\ \b \f \n \r \t \" \\t >"}

test z01/map {map to JSON} {
  Ju toJson {a A b B c 3 4 {} e E} -map
} {{"a":"A","b":"B","c":3,"4":"","e":"E"}}

test z01/nested {nested map to JSON} {
  Ju toJson {a A b: {c C d: {} e 5 f ""} g G} -map
} {{"a":"A","b":{"c":"C","d":{},"e":5,"f":""},"g":"G"}}

test z01/float {float to JSON} {
  Ju toJson 1.2345000
} 1.2345

test z01/float {float to JSON, force string} {
  Ju toJson 1.2345000 -str
} {"1.2345000"}

test z01/octal {octal to JSON} {
  Ju toJson 010
} 8

test z01/octal {octal to JSON, force string} {
  Ju toJson 010 -str
} {"010"}

test z01/hex {hex to JSON} {
  Ju toJson 0x10
} 16

test z01/hex {hex to JSON, force string} {
  Ju toJson 0x10 -str
} {"0x10"}

test z01/spaces {spaces to JSON} {
  Ju toJson {  }
} {"  "}

test z01/parse {parse JSON} {
  Ju fromJson {[1,"b",[3,""],"e",{"f":7,"g":"h h"},"i"]}
} {1 b {3 {}} e {f 7 g {h h}} i}

test z01/ns-num {number to netstring} {
  Ju toNets 123
} 3:123,

test z01/ns-str {string to netstring} {
  Ju toNets abc
} 3:abc,

test z01/ns-str {empty string to netstring} {
  Ju toNets {}
} 0:,

test z01/ns-map {map to netstring} {
  Ju toNets {a A b B c 3 4 {} e E} -map
} 1:a,1:A,1:b,1:B,1:c,1:3,1:4,0:,1:e,1:E,

test z01/ns-nested {nested map to netstring} {
  Ju toNets {a A b: {c C d: {} e 5 f ""} g G} -map
} 1:a,1:A,2:b:,31:1:c,1:C,2:d:,0:,1:e,1:5,1:f,0:,,1:g,1:G,

test z01/ns-spaces {spaces to netstring} {
  Ju toNets {  }
} {2:  ,}

test z01/ns-parse-one {parse netstring} {
  Ju fromNets 3:123,
} 123

test z01/ns-parse-map {parse netstring map} {
  Ju fromNets 1:a,1:A,1:b,1:B,1:c,1:3,1:4,0:,1:e,1:E,
} {a A b B c 3 4 {} e E}

test z01/ns-parse-nested {parse nested netstring map} {
  Ju fromNets 1:a,1:A,2:b:,31:1:c,1:C,2:d:,0:,1:e,1:5,1:f,0:,,1:g,1:G,
} {a A b: {c C d: {} e 5 f {}} g G}

cleanupTests
